{"ast":null,"code":"const {\n  GoogleSpreadsheet\n} = require(\"google-spreadsheet\");\n\nconst doc = new GoogleSpreadsheet(\"1HxTJrDrdErdQC5ctSgiU8LBoQHfVioxO-EWk-4PHZLU\");\n\nasync function accessSpreadsheet(name, email, text) {\n  await doc.useServiceAccountAuth(require('../creds-from-google.json'));\n  await doc.loadInfo(); // loads document properties and worksheets\n  // const sheet = await doc.sheetsByIndex[0]\n\n  if (await doc.sheetsByIndex[0].loadHeaderRow()) {\n    await doc.sheetsByIndex[0].addRow({\n      name: name,\n      email: email,\n      text: text\n    });\n    console.log(\"if\");\n  } else {\n    const sheet = await doc.addSheet({\n      headerValues: ['name', 'email', 'text']\n    });\n    await sheet.addRow({\n      name: name,\n      email: email,\n      text: text\n    });\n    console.log(\"else\");\n  } // await sheet.headerValues(['name', 'email', 'text'])\n  // await sheet.loadCells\n  // newRow();\n  // const sheets = await sheet.getRows()\n  // sheets.forEach(sheet => {\n  //     console.log(\"id: \" + sheet._rawData[0],\n  //     \"imię: \" + sheet._rawData[1], \"email: \" + sheet._rawData[2], \"text: \" + sheet._rawData[3] )\n  // })\n  // const rows = await sheet.getRows();\n  // console.log(sheet.cellStats)\n  // console.log(rows)\n\n} // accessSpreadsheet();\n\n\nexport default accessSpreadsheet;","map":{"version":3,"sources":["D:/Portfolio/portfolio/src/components/spreadsheet.js"],"names":["GoogleSpreadsheet","require","doc","accessSpreadsheet","name","email","text","useServiceAccountAuth","loadInfo","sheetsByIndex","loadHeaderRow","addRow","console","log","sheet","addSheet","headerValues"],"mappings":"AAAA,MAAM;AAACA,EAAAA;AAAD,IAAsBC,OAAO,CAAC,oBAAD,CAAnC;;AACA,MAAMC,GAAG,GAAG,IAAIF,iBAAJ,CAAsB,8CAAtB,CAAZ;;AAEA,eAAeG,iBAAf,CAAiCC,IAAjC,EAAuCC,KAAvC,EAA8CC,IAA9C,EAAoD;AAChD,QAAMJ,GAAG,CAACK,qBAAJ,CAA0BN,OAAO,CAAC,2BAAD,CAAjC,CAAN;AACA,QAAMC,GAAG,CAACM,QAAJ,EAAN,CAFgD,CAE1B;AACtB;;AAEA,MAAG,MAAMN,GAAG,CAACO,aAAJ,CAAkB,CAAlB,EAAqBC,aAArB,EAAT,EAA+C;AAC3C,UAAMR,GAAG,CAACO,aAAJ,CAAkB,CAAlB,EAAqBE,MAArB,CAA4B;AAAEP,MAAAA,IAAI,EAAEA,IAAR;AAAcC,MAAAA,KAAK,EAAEA,KAArB;AAA4BC,MAAAA,IAAI,EAAEA;AAAlC,KAA5B,CAAN;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACH,GAHD,MAGO;AACH,UAAMC,KAAK,GAAG,MAAMZ,GAAG,CAACa,QAAJ,CAAa;AAAEC,MAAAA,YAAY,EAAE,CAAC,MAAD,EAAS,OAAT,EAAkB,MAAlB;AAAhB,KAAb,CAApB;AACA,UAAMF,KAAK,CAACH,MAAN,CAAa;AAAEP,MAAAA,IAAI,EAAEA,IAAR;AAAcC,MAAAA,KAAK,EAAEA,KAArB;AAA4BC,MAAAA,IAAI,EAAEA;AAAlC,KAAb,CAAN;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH,GAZ+C,CAchD;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAGH,C,CAED;;;AAEA,eAAeV,iBAAf","sourcesContent":["const {GoogleSpreadsheet} = require(\"google-spreadsheet\");\r\nconst doc = new GoogleSpreadsheet(\"1HxTJrDrdErdQC5ctSgiU8LBoQHfVioxO-EWk-4PHZLU\");\r\n\r\nasync function accessSpreadsheet(name, email, text) {\r\n    await doc.useServiceAccountAuth(require('../creds-from-google.json'));\r\n    await doc.loadInfo(); // loads document properties and worksheets\r\n    // const sheet = await doc.sheetsByIndex[0]\r\n\r\n    if(await doc.sheetsByIndex[0].loadHeaderRow()) {\r\n        await doc.sheetsByIndex[0].addRow({ name: name, email: email, text: text});\r\n        console.log(\"if\")\r\n    } else {\r\n        const sheet = await doc.addSheet({ headerValues: ['name', 'email', 'text'] });\r\n        await sheet.addRow({ name: name, email: email, text: text});\r\n        console.log(\"else\")\r\n    }\r\n    \r\n    // await sheet.headerValues(['name', 'email', 'text'])\r\n    // await sheet.loadCells\r\n\r\n    \r\n    // newRow();\r\n\r\n    // const sheets = await sheet.getRows()\r\n    // sheets.forEach(sheet => {\r\n    //     console.log(\"id: \" + sheet._rawData[0],\r\n    //     \"imię: \" + sheet._rawData[1], \"email: \" + sheet._rawData[2], \"text: \" + sheet._rawData[3] )\r\n    // })\r\n\r\n    // const rows = await sheet.getRows();\r\n    // console.log(sheet.cellStats)\r\n    // console.log(rows)\r\n\r\n\r\n}\r\n\r\n// accessSpreadsheet();\r\n\r\nexport default accessSpreadsheet;"]},"metadata":{},"sourceType":"module"}